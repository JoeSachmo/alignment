#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")

sys.stderr.write("{}".format(len(e_count.keys())))
theta_prior = defaultdict(lambda: 1/float(len(e_count.keys())))
theta_current = {}

#for (f_i, e_j) in fe_count.keys():
#  theta_prior[(f_i,e_j)] = 1/float(len(e_count.keys()))
#for (f_i, e_j) in fe_count.keys():
#  theta_prior[(f_i,e_j)] = fe_count[(f_i, e_j)]/float(e_count[e_j])

for x in range(10):
  count = defaultdict(float)
  countE = defaultdict(float)
  for (n, (f, e)) in enumerate(bitext):
    for f_i in set(f):
      Z = 0
      for e_j in set(e):
        Z += theta_prior[(f_i, e_j)]
      for e_j in set(e):
        c = theta_prior[(f_i, e_j)]/Z
        count[(f_i, e_j)] += c
        countE[e_j] += c
    if n % 500 == 0:
      sys.stderr.write(".")
  
  for (f, e) in count.keys():
    theta_current[(f,e)] = count[(f, e)]/countE[e]
    ##sys.stderr.write("{}".format(theta_current[(f,e)]))
    #sys.stderr.write("\n")
  theta_prior = theta_current.copy();
sys.stderr.write("\n")

"""
for (n, (f, e)) in enumerate(bitext):
  for f_i in set(f):
    for e_j in set():
      code
    
  theta_prior[(n,f_i,e_j)] = 1/float(len(set(e)))
#for (f_i, e_j) in fe_count.keys():
#  theta_prior[(f_i,e_j)] = fe_count[(f_i, e_j)]/float(e_count[e_j])

for x in range(10):
  count = defaultdict(float)
  countE = defaultdict(float)
  for (n, (f, e)) in enumerate(bitext):
    for e_j in set(e):
      Z = 0
      for f_i in set(f):
        Z += theta_prior[(n,f_i, e_j)]
      for f_i in set(f):
        c = theta_prior[(n,f_i, e_j)]/Z
        count[(f_i, e_j)] += c
        countE[e_j] += c
    if n % 500 == 0:
      sys.stderr.write(".")
  
  for (n, f, e) in count.keys():
    theta_current[(n,f,e)] = count[(f, e)]/countE[e]
  theta_prior = theta_current.copy();
sys.stderr.write("\n")
"""

for (n, (f, e)) in enumerate(bitext):
  for (i, f_i) in enumerate(f):
    best_p = 0
    best_j = 0
    for (j, e_j) in enumerate(e):
      if theta_prior[(f_i,e_j)] > best_p:
        best_p = theta_prior[(f_i,e_j)]
        best_j = j
    sys.stdout.write("%i-%i " % (i,best_j))
  sys.stdout.write("\n")
