#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict,deque

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)
J_count = defaultdict(int)
for (n, (f, e)) in enumerate(bitext):
  J_count[len(set(e))] += 1
  for f_i in set(f):
    f_count[f_i] += 1
    for e_j in set(e):
      fe_count[(f_i,e_j)] += 1
  for e_j in set(e):
    e_count[e_j] += 1
  if n % 500 == 0:
    sys.stderr.write(".")

sys.stderr.write("{}".format(len(e_count.keys())))
theta_prior = defaultdict(lambda: 1/float(len(e_count.keys())))
theta_current = {}
theta_hmm_p = {}
theta_hmm_c = {}
for J in J_count.keys():
  for x in range(J):
    theta_hmm_p[(J,x)] = 1/float(J)

for x in range(5):
  count = defaultdict(float)
  countE = defaultdict(float)
  countJ = defaultdict(float)
  countJZ = defaultdict(float)
  for (n, (f, e)) in enumerate(bitext):
    J = len(set(e))
    #prevJ = defaultdict(lambda: float(1))
    #currJ = defaultdict(float)
    for f_i in set(f):
      Z = 0
      for e_j in set(e):
        for x in range(J):
          Z += theta_prior[(f_i, e_j)]*theta_hmm_p[(J,x)]
      for (j, e_j) in enumerate(e):
        for x in range(J):
          c = theta_prior[(f_i, e_j)]*theta_hmm_p[(J,x)]/Z
          countJ[(J,abs(j-x))] += c
          countJZ[J] += c
          count[(f_i, e_j)] += c
          countE[e_j] += c
        #currJ[j] = c
      #prevJ = currJ.copy()
    if n % 500 == 0:
      sys.stderr.write(".")
  
  for (f, e) in count.keys():
    theta_current[(f,e)] = count[(f, e)]/countE[e]
  Z = defaultdict(float)
  for (J,j) in countJ:
    theta_hmm_c[(J,j)] = countJ[(J,j)]/countJZ[J]
  theta_prior = theta_current.copy();
  theta_hmm_p = theta_hmm_c.copy();
sys.stderr.write("\n")
sys.stderr.write("{}/{}".format(theta_hmm_p[4,2],theta_hmm_p[4,1]))

for (n, (f, e)) in enumerate(bitext):
  prevJ = {}
  J = len(set(e))
  I = len(set(f))
  Q = defaultdict(lambda: float(1))
  for (i, f_i) in enumerate(f):
    if i == 0:
      for (j, e_j) in enumerate(e):
        Q[(i,j)] = (theta_prior[(f_i,e_j)],-1)
    else:
      for (j, e_j) in enumerate(e):
        best_p = 0
        best_jp = 0
        for (j_prev, e_j_prev) in enumerate(e):
          q = theta_hmm_p[(J,abs(j-j_prev))]*Q[(i-1,j_prev)][0]
          if q > best_p:
            best_p = q
            best_jp = j_prev
        Q[(i,j)] = (theta_prior[(f_i,e_j)]*best_p,best_jp)
  best_p = 0
  start_j = 0
  next_j = 0
  for x in range(J):
    if Q[(I-1,x)][0] > best_p:
      best_p = Q[(I-1,x)][0]
      start_j = x
      next_j = Q[(I-1,x)][1]
  alignments = deque([start_j,next_j])
  I_index = I-2
  start_j = next_j
  while I_index != -1:
    next_j = Q[(I_index,start_j)][1]
    alignments.append(next_j)
    start_j = next_j
    I_index -= 1
  I_index = 0
  alignments.pop()
  while len(alignments) != 0:
    sys.stdout.write("%i-%i " % (I_index,alignments.pop()))
    I_index += 1
  sys.stdout.write("\n")
